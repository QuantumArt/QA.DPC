@using QA.ProductCatalog.Admin.WebApp.Models

@model DefinitionElement

@{
    string actionName;

    if (Model is DefinitionFieldInfo)
    {
        actionName = ((DefinitionFieldInfo)Model).Field.GetType().Name;
    }
    else
    {
        actionName = "Content";
    }

    actionName = "Save" + actionName;
}

<form asp-controller="DefinitionEditor" asp-action="@actionName" data-ajax="true" data-ajax-method="POST"
      data-ajax-success="DefinitionEditor.UpdateFormAfterSave"
      data-ajax-failure="DefinitionEditor.OnTreeNodeSaveError"
      data-ajax-begin="DefinitionEditor.onTreeNodeSaveBegin"
      data-ajax-complete="DefinitionEditor.onTreeNodeSaveComplete">

    if (Model is DefinitionFieldInfo || (!Model.InDefinition && !(Model is DefinitionContentInfo && ((DefinitionContentInfo)Model).IsFromDictionaries)))
    {
        <div class="editor-label">
            @Html.LabelFor(x => x.InDefinition, new { @for = "inDefinitionCheckbox" })
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(x => x.InDefinition, new { id = "inDefinitionCheckbox", onchange = "DefinitionEditor.ShowOrHideFieldProps()" })
        </div>
    }
    else
    {
        @Html.HiddenFor(x => Model.InDefinition)
    }


    <div id="FieldProps">
        @Html.EditorForModel()
    </div>

    @Html.HiddenFor(x => Model.Path)

    @Html.HiddenFor(x => Model.Xml)

    <p style="clear: both">
        <input id="save" type="submit" value="Применить" />
    </p>
}
</form>

<script>
    DefinitionEditor.ShowOrHideFieldProps();
</script>
