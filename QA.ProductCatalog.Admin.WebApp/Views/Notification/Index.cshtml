@using QA.ProductCatalog.Integration.Notifications
@model ConfigurationInfo

<div class="formLayout">
    @if (Model == null)
    {
        <fieldset>
            <legend>Важно</legend>
            <div class="gr-wrapper">
                Cервис публикации временно недоступен
            </div>
        </fieldset>
    }
    else
    {
        if (!Model.IsActual)
        {
            <fieldset>
                <legend>Важно</legend>
                <div class="gr-wrapper">
                    Настройки сервиса публикации изменены @Html.ActionLink("обновить", "UpdateConfiguration", null, new { @class = "js" })
                </div>
            </fieldset>
        }
        <fieldset>
            <legend>Системные настройки</legend>
            <div class="gr-wrapper">
                <div class="group-panel-item">
                    <dl class="plain-field row">
                        <dt title="Определяет, где задаются настройки каналов" class="plain-field-capture label " style="">Провайдер каналов</dt>
                        <dd style="" class="plain-field-value field">
                            <span title="" class="label None" style="">@Model.NotificationProvider</span>
                        </dd>
                    </dl>
                    <dl class="plain-field row">
                        <dt title="Время, когда был запущен сервис NotificationSender" class="plain-field-capture label " style="">Время запуска сервиса</dt>
                        <dd style="" class="plain-field-value field">
                            <span title="" class="label None" style="">@Model.Started</span>
                        </dd>
                    </dl>
                </div>
             </div>
        </fieldset>

        <fieldset>
            <legend>Каналы</legend>
            <table class="inner-groupping-table">
                <thead>
                    <tr>
                        <th>Канал</th>
                        <th>Очередь</th>
                        <th>Время в очереди</th>
                        <th>Время публикации</th>
                        <th>Id продукта</th>
                        <th>Статус публикации</th>
                        <th>Статус канала</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var channel in Model.Channels)
                {
                    <tr>
                        <td>@channel.Name</td>
                        <td>@channel.Count</td>
                        <td>@channel.LastQueued</td>
                        <td>@channel.LastPublished</td>
                        <td>@channel.LastId</td>
                        <td>@channel.LastStatus</td>
                        @switch (channel.State)
                        {
                            case State.Actual:
                                <td class="icon"></td>
                                break;
                            case State.Chanded:
                                <td class="refresh icon"></td>
                                break;
                            case State.Deleted:
                                <td class="delete icon"></td>
                                break;
                            case State.New:
                                <td class="add icon"></td>
                                break;
                        }

                    </tr>
                }
                </tbody>
            </table>
        </fieldset>

        <fieldset>
            <legend>Общие настройки</legend>
            <div class="gr-wrapper">
                <div class="group-panel-item">
                    <dl class="plain-field row">
                        <dt title="Определяет, будут ли изменения в статьях автоматически попадать на витрины" class="plain-field-capture label " style="">Автопубликация</dt>
                        <dd style="" class="plain-field-value field">
                            <span title="" class="label None" style="">@Html.DisplayFor(m => m.CurrentSettings.Autopublish)</span>
                        </dd>
                        @if (Model.CurrentSettings.Autopublish != Model.ActualSettings.Autopublish)
                        {
                        <dd style="" class="plain-field-value field">
                            <div title="" class="refresh icon" style=""></div>
                        </dd>
                        }
                    </dl>
                    <dl class="plain-field row">
                        <dt title="Интервал проверки новых нотификаций для отправки" class="plain-field-capture label " style="">Интервал отправки</dt>
                        <dd style="" class="plain-field-value field">
                            <span title="" class="label None" style="">@Html.DisplayFor(m => m.CurrentSettings.CheckInterval) с.</span>
                        </dd>
                        @if (Model.CurrentSettings.CheckInterval != Model.ActualSettings.CheckInterval)
                        {
                            <dd style="" class="plain-field-value field">
                                <div title="" class="refresh icon" style=""></div>
                            </dd>
                        }
                    </dl>
                    <dl class="plain-field row">
                        <dt title="Интервал ожидания, когда новых уведомлений не отправляется для этого потребителя" class="plain-field-capture label " style="">Интервал отправки при ошибках</dt>
                        <dd style="" class="plain-field-value field">
                            <span title="" class="label None" style="">@Html.DisplayFor(m => m.CurrentSettings.WaitIntervalAfterErrors) с.</span>
                        </dd>
                        @if (Model.CurrentSettings.WaitIntervalAfterErrors != Model.ActualSettings.WaitIntervalAfterErrors)
                        {
                            <dd style="" class="plain-field-value field">
                                <div title="" class="refresh icon" style=""></div>
                            </dd>
                        }
                    </dl>
                    <dl class="plain-field row">
                        <dt title="Количество ошибок при отправке перед интервалом ожидания" class="plain-field-capture label " style="">Количество ошибок</dt>
                        <dd style="" class="plain-field-value field">
                            <span title="" class="label None" style="">@Html.DisplayFor(m => m.CurrentSettings.ErrorCountBeforeWait)</span>
                        </dd>
                        @if (Model.CurrentSettings.ErrorCountBeforeWait != Model.ActualSettings.ErrorCountBeforeWait)
                        {
                            <dd style="" class="plain-field-value field">
                                <div title="" class="refresh icon" style=""></div>
                            </dd>
                        }
                    </dl>
                    <dl class="plain-field row">
                        <dt title="Количество обрабатываемых сообщений за раз" class="plain-field-capture label " style="">Размер пакета сообщений</dt>
                        <dd style="" class="plain-field-value field">
                            <span title="" class="label None" style="">@Html.DisplayFor(m => m.CurrentSettings.PackageSize)</span>
                        </dd>
                        @if (Model.CurrentSettings.PackageSize != Model.ActualSettings.PackageSize)
                        {
                            <dd style="" class="plain-field-value field">
                                <div title="" class="refresh icon" style=""></div>
                            </dd>
                        }
                    </dl>
                    <dl class="plain-field row">
                        <dt title="Таймаут для отправки нотификаций" class="plain-field-capture label " style="">Таймаут отправки на витрину</dt>
                        <dd style="" class="plain-field-value field">
                            <span title="" class="label None" style="">@Html.DisplayFor(m => m.CurrentSettings.TimeOut)</span>
                        </dd>
                        @if (Model.CurrentSettings.TimeOut != Model.ActualSettings.TimeOut)
                        {
                            <dd style="" class="plain-field-value field">
                                <div title="" class="refresh icon" style=""></div>
                            </dd>
                        }
                    </dl>
                </div>
            </div>
        </fieldset>
    }
</div>