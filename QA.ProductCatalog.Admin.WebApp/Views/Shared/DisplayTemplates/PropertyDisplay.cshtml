@using QA.Core.Models.UI
@using QA.ProductCatalog.Admin.WebApp.Core
@model QA.Core.DPC.UI.Controls.PropertyDisplay
@{
    if (Model == null || Model.Title == null || (Model.Hidden ?? false)) { return; }
    string title = Model.Title;
}
<!--
    Model: @Model
    Model.Value: @Model.Value
    -->
<dl id="@Model.UId" class="plain-field row">
    <dt title="@(title)" class="plain-field-capture label " style="@(Model.LabelWidth != null ? ("width: "+ Model.LabelWidth) : "")">@Model.ReplaceNotesIfNeeded(title.Length > 50 ? title.Substring(0, 50) + "..." : title)</dt>
    <dd style="@(Model.Padding != null ? Model.Padding.ToString(): "")" class="plain-field-value field">
    @if (Model.Value is string modelString)
    {
			@Model.ReplaceNotesIfNeeded(modelString)
    }
    else if (Model.Value is UIElement modelValue)
    {
      @Html.DisplayForUIElement(modelValue);      
    }
    else
    {
	    @Html.DisplayFor(x => Model.Value);
    }
    </dd>

</dl>
@if (Model.Content != null)
{
    <dl class="row">
        <dt class="label">

        </dt>
        <dd class="field">
          <div>
            @if (Model.Content is UIElement ui)
            {
              @Html.DisplayForUIElement(ui)
            }
            else
            {
              @Html.DisplayFor(x => Model.Content)             
            }
          </div>
        </dd>
    </dl>
}