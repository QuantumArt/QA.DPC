@using Microsoft.AspNetCore.Html
@using QA.ProductCatalog.Admin.WebApp.Core
@using QA.ProductCatalog.Admin.WebApp.Models
@using QA.Core.DPC.UI.Controls;
@model QA.Core.DPC.UI.GroupGridView
@if (Model == null || (Model.Hidden ?? false)) { return; }
@{
    var firstRow = Model.GetChildren().FirstOrDefault();
    if (firstRow == null)
    {
        return;
    }
}
<div id="@Model.UId" class="grid-view">
    @if (Model.Collapsible)
    {
        <div class="grid-view-header">
            <button type="button" class="toggle-all anchor bp3-button bp3-minimal bp3-intent-primary">свернуть/развернуть все</button>
        </div>
    }
    <table cellspacing="0" cellpadding="0" style="@(Model.Width != null? "width: " + Model.Width : "")">
        @foreach (var col in firstRow.Columns)
        {
            <colgroup width="@(col.Width != null ? col.Width.TrimEnd('p','x') : "")"></colgroup>
        }
        <tr>
            @foreach (var col in firstRow.Columns)
            {
                <th>
                    <a title="@Model.ReplaceNotesIfNeeded(col.Title)">@Model.ReplaceNotesIfNeeded(col.Title)</a>
                </th>
            }
        </tr>
        @if (Model.Grouppable)
        {
            foreach (var gr in Model.GetGroups())
            {
                IHtmlContent content;
                if (Model.RowTemplate != null)
                {
                    if (Model.GetChildren(gr).Select(x =>
                    {
                        Model.RowTemplate.DataContext = x.DataContext;
                        return Model.RowTemplate;
                    }).All(x => x.Hidden ?? false))
                    {
                        continue;
                    }
                }
                if (Model.GroupingTemplate != null && (gr.Key as string) != string.Empty)
                {
                    Model.GroupingTemplate.DataContext = gr.Key;
                    content = Html.DisplayForUIElement(Model.GroupingTemplate);
                }
                else
                {
                    content = Html.DisplayFor(x => gr.Key);
                }

                <tr id="@(Model.Collapsible ? Html.GetUniqueId(content.ToString()) : "")" class="group-row @(Model.GroupInitialFolding == GroupInitialFolding.Folded ? "collapsed" : "") @(Model.Collapsible ? "collapsible": "")">
                    <td colspan="@Model.Columns.Count">
                        @content
                        @if (Model.Collapsible)
                        {
                            <button type="button" class="bp3-button bp3-minimal bp3-outlined bp3-intent-primary click-handle anchor">+/-</button>
                        }
                    </td>
                </tr>
                if (Model.Collapsible)
                {
                    var t = 0;
                    <tr class="@(Model.Collapsible ? "collapsible-row" : "")">
                        <td colspan="@Model.Columns.Count">
                            <table class="inner-groupping-table" cellspacing="0" cellpadding="0">
                                @foreach (var col in firstRow.Columns)
                                {
                                    <colgroup width="@(col.Width != null ? col.Width: "")"></colgroup>
                                }
                                @foreach (var row in Model.GetChildren(gr))
                                {
                                    if (Model.RowTemplate != null)
                                    {
                                        Model.RowTemplate.DataContext = row.DataContext;
                                    }
                                    if (Model.RowTemplate == null || !(Model.RowTemplate.Hidden ?? false))
                                    {
                                        t++;
                                        <tr class="@(Model.RowTemplate != null ? Model.RowTemplate.ClassName: "")">
                                            @foreach (var col in row.Columns)
                                            {

                                                <td style="overflow: @col.Overflow.ToString().ToLower(); @(col.Padding!=null?col.Padding.ToString():"")">
                                                    @Html.DisplayFor(x => col)
                                                </td>
                                            }
                                        </tr>
                                    }
                                }
                            </table>

                        </td>
                    </tr>
                }
                else
                {
                  @await Component.InvokeAsync("GetRows", new GetRowsModel() { GridView = Model, Items = gr});
                }
            }
        }
        else
        {
          @await Component.InvokeAsync("GetRows", new GetRowsModel() { GridView = Model, Items = Model.Items});
        }
    </table>
</div>
