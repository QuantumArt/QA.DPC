@using QA.Core.DPC.Resources
@using QA.Core.Models.Configuration
@using QA.ProductCatalog.Admin.WebApp.Models

@model QA.ProductCatalog.Admin.WebApp.Models.DefinitionFieldInfo

@Html.HiddenFor(x => x.FieldId)

@if (Model.FieldType == FieldDefinitionType.Dictionaries)
{
  <div class="editor-label">@Html.LabelFor(x => x.DefaultCachePeriod)</div>
  <div class="editor-field">@Html.TextBoxFor(x => x.DefaultCachePeriod)</div>
}
else
{
  <div class="display-label">@Html.LabelFor(x => x.FieldId)</div>
  <div class="display-field">@Html.DisplayFor(x => x.FieldId)</div>

  <div class="editor-label">@Html.LabelFor(x => x.FieldName)</div>
  if (Model.FieldType == FieldDefinitionType.VirtualField || Model.FieldType == FieldDefinitionType.VirtualMultiEntityField)
  {
    <div class="display-field">@Html.DisplayFor(x => x.FieldName)</div>
    @Html.HiddenFor(x => x.FieldName)
  }
  else
  {
    <div class="editor-field">@Html.TextBoxFor(x => x.FieldName, new {Placeholder = ControlStrings.JsonFieldName})</div>
  }

  <div class="editor-label">@Html.LabelFor(x => x.FieldTitle)</div>
  <div class="editor-field">@Html.TextBoxFor(x => x.FieldTitle, new { Placeholder = ControlStrings.LabelText })</div>
}

@if (Model.FieldType == FieldDefinitionType.EntityField 
     || Model.FieldType == FieldDefinitionType.BackwardRelationField 
     || Model.FieldType == FieldDefinitionType.ExtensionField)
{
  <div class="editor-label">@Html.LabelFor(x => x.CloningMode)</div>
  <div class="editor-field">@Html.DropDownListFor(x => x.CloningMode, Html.GetEnumSelectList(typeof(CloningMode)))</div>

  <div class="editor-label">@Html.LabelFor(x => x.DeletingMode)</div>
  <div class="editor-field">@Html.DropDownListFor(x => x.DeletingMode, Html.GetEnumSelectList(typeof(DeletingMode)))</div>

  <div class="editor-label">@Html.LabelFor(x => x.UpdatingMode)</div>
  <div class="editor-field">@Html.DropDownListFor(x => x.UpdatingMode,Html.GetEnumSelectList(typeof(UpdatingMode)))</div>

  if (Model.FieldType == FieldDefinitionType.EntityField || Model.FieldType == FieldDefinitionType.BackwardRelationField)
  {
    <div class="editor-label">@Html.LabelFor(x => x.PreloadingMode)</div>
    <div class="editor-field">@Html.DropDownListFor(x => x.PreloadingMode,Html.GetEnumSelectList(typeof(PreloadingMode)))</div>

    <div class="editor-label">@Html.LabelFor(x => x.RelationCondition)</div>
    <div class="editor-field">
      @Html.TextAreaFor(x => x.RelationCondition, new
      {
        Cols = 80,
        Rows = 6,
        Placeholder = ControlStrings.RelationConditionDescription,
        Style = "resize: none; font-family: monospace"
      })
    </div>

    <div class="editor-label">@Html.LabelFor(x => x.ClonePrototypeCondition)</div>
    <div class="editor-field">@Html.TextAreaFor(x => x.ClonePrototypeCondition, new
      {
        Cols = 80,
        Rows = 6,
        Placeholder = ControlStrings.ClonePrototypeConditionDescription,
        Style = "resize: none; font-family: monospace"
      })
    </div>

    <div class="display-label">
      @(Model.FieldType == FieldDefinitionType.EntityField ? ControlStrings.RelateToAnother : ControlStrings.RelateToThis)
    </div>
    <div class="display-field">@Model.RelatedContentName @Model.RelatedContentId</div>
  }
  else if (Model.FieldType == FieldDefinitionType.ExtensionField)
  {
    <div class="display-label">
      <span class="EditorNote">@ControlStrings.IsClassifier</span>
    </div>
  }
}
else if (Model.FieldType == FieldDefinitionType.VirtualField || Model.FieldType == FieldDefinitionType.VirtualMultiEntityField)
{
  <div class="editor-label">@ControlStrings.Path</div>
  <div class="editor-field">@Html.TextBoxFor(x => x.VirtualPath, new { @class = "text-box single-line" })</div>
  if (Model.FieldType == FieldDefinitionType.VirtualField)
  {
    <div class="editor-label">@ControlStrings.RemovePath</div>
    <div class="editor-field">@Html.TextBoxFor(x => x.ObjectToRemovePath, new { @class = "text-box single-line" })</div>
                                                                                                                  
    <div class="display-label">@ControlStrings.Converter</div>
    <div class="display-field">@Model.Converter</div>
  }
}
else if (Model.FieldType == FieldDefinitionType.PlainField)
{
  <div class="editor-label">@ControlStrings.DontWrapInCData</div>
  <div class="editor-field">@Html.CheckBoxFor(x => x.SkipCData)</div>
                                                               
  <div class="editor-label">@ControlStrings.LoadAsImage</div>
  <div class="editor-field">@Html.CheckBoxFor(x => x.LoadLikeImage)</div>
}

@Html.HiddenFor(x => Model.FieldType)

