@startuml EditorInitialization
skinparam shadowing false
skinparam ParticipantPadding 30
skinparam BoxPadding 100

participant Backend

box "Frontend Services"
participant ProductController
participant DataSerializer
participant DataNormalizer
database DataContext
database SchemaContext
end box

collections Components

hnote over Components
  регистрируем
  настройки и
  сервисы в DI
end note

hnote over ProductController
  читаем настройкииз DI
end note

Components -> ProductController: <b>.initialize()
activate ProductController

ProductController -> Backend: <b>/GetEditorSchema\n<b>?productDefinitionId
note left of ProductController: EditorSchemaModel
Backend --> ProductController

ProductController -> SchemaContext: <b>.initSchema( schemaModel )
hnote over SchemaContext
 Линкуем $ref
 ссылки в схеме
end note

ProductController -> DataNormalizer: <b>.initSchema( schemaModel )
hnote over DataNormalizer: строим схему Normalizr

ProductController -> DataContext: <b>.initSchema( schemaModel )
hnote over DataContext
  строим схему
  MobX State Tree
end note
hnote over DataContext
  строим снапшоты статей со
  значениями по-умолчанию
end note

alt Создаем новый продукт

  ProductController -> DataContext: <b>.initStore( {} )
  hnote over DataContext: Создаем пустой Store

  ProductController -> DataContext: <b>.createArticle( contentName )

  note right of ProductController: New Article
  DataContext --> ProductController

else Редактируем существующий продукт

  ...

  ProductController -> Backend: <b>/GetEditorData\n<b>?articleId
  note left of ProductController: EditorDataModel
  Backend --> ProductController:

  ProductController -> DataSerializer: <b>.deserialize( JSON )
  note right of ProductController: Nested Objects
  DataSerializer --> ProductController

  ProductController -> DataNormalizer: \n<b>.normalize( nestedObjects )
  note right of ProductController: Flat Objects
  DataNormalizer --> ProductController

  ProductController -> DataContext: \n<b>.initStore( flatObjects )
  hnote over DataContext
    Создаем Store из
    плоских объектов
  end note

  ProductController -> DataContext: <b>.store[ contentName ].get( articleId )
  note right of ProductController: Article Graph
  DataContext --> ProductController

deactivate ProductController
end

note left of Components: Article Graph
ProductController --> Components

deactivate ProductController

@enduml