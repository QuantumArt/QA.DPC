@startuml EditorInitialization
skinparam shadowing false
skinparam ParticipantPadding 30
skinparam BoxPadding 100

participant Backend

box "Frontend Services"
participant InitializationController
participant SchemaLinker
participant DataSerializer
participant DataNormalizer
database DataContext
end box

collections Components

hnote over Components
  регистрируем
  настройки и
  сервисы в DI
end note

hnote over InitializationController
  читаем настройкииз DI
end note

Components -> InitializationController: <b>.initialize()
activate InitializationController

InitializationController -> Backend: <b>/GetEditorSchema\n<b>?productDefinitionId
note left of InitializationController: EditorSchemaModel
Backend --> InitializationController

InitializationController -> SchemaLinker: <b>.linkSchema( schemaModel )
hnote over SchemaLinker
 Линкуем $ref
 ссылки в схеме
end note

note right of InitializationController: Schema Graph
SchemaLinker --> InitializationController

InitializationController -> DataNormalizer: <b>.initSchema( schemaGraph )
hnote over DataNormalizer: строим схему Normalizr

InitializationController -> DataContext: <b>.initSchema( schemaGraph )
hnote over DataContext
  строим схему
  MobX State Tree
end note
hnote over DataContext
  строим снапшоты статей со
  значениями по-умолчанию
end note

alt Создаем новый продукт

  InitializationController -> SchemaLinker: \n<b>.addPreloadedArticles( {} )
  hnote over SchemaLinker
    Добавляем предзагруженные
    статьи в пустой снапшот
  end note

  InitializationController -> DataContext: <b>.initStore( flatObjects )
  hnote over DataContext: Создаем пустой Store

  InitializationController -> DataContext: <b>.createArticle( contentName )

  note right of InitializationController: New Article
  DataContext --> InitializationController

else Редактируем существующий продукт

  ...

  InitializationController -> Backend: <b>/GetEditorData\n<b>?articleId
  note left of InitializationController: EditorDataModel
  Backend --> InitializationController:

  InitializationController -> DataSerializer: <b>.deserialize( JSON )
  note right of InitializationController: Nested Objects
  DataSerializer --> InitializationController

  InitializationController -> DataNormalizer: \n<b>.normalize( nestedObjects )
  note right of InitializationController: Flat Objects
  DataNormalizer --> InitializationController

  InitializationController -> SchemaLinker: \n<b>.addPreloadedArticles( flatObjects )
  hnote over SchemaLinker
    Добавляем предзагруженные
    статьи в снапшот
  end note

  InitializationController -> DataContext: \n<b>.initStore( flatObjects )
  hnote over DataContext
    Создаем Store из
    плоских объектов
  end note

  InitializationController -> DataContext: <b>.store[ contentName ].get( articleId )
  note right of InitializationController: Article Graph
  DataContext --> InitializationController

deactivate InitializationController
end

note left of Components: Article Graph
InitializationController --> Components

deactivate InitializationController

@enduml