// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QA.Core.ProductCatalog.ActionsRunnerModel;

namespace QA.Core.ProductCatalog.ActionsRunnerModel.SqlServerMigrations
{
    [DbContext(typeof(SqlServerTaskRunnerEntities))]
    partial class SqlServerTaskRunnerEntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QA.Core.ProductCatalog.ActionsRunnerModel.Schedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CronExpression");

                    b.Property<bool>("Enabled");

                    b.HasKey("ID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("QA.Core.ProductCatalog.ActionsRunnerModel.Task", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("BinData");

                    b.Property<string>("Config");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Data");

                    b.Property<string>("DisplayName");

                    b.Property<string>("ExclusiveCategory");

                    b.Property<bool>("IsCancellationRequested");

                    b.Property<bool>("IsCancelled");

                    b.Property<DateTime?>("LastStatusChangeTime");

                    b.Property<string>("Message");

                    b.Property<string>("Name");

                    b.Property<byte?>("Progress");

                    b.Property<int?>("ScheduleID");

                    b.Property<int?>("ScheduledFromTaskID");

                    b.Property<int>("StateID");

                    b.Property<int>("UserID");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("ScheduledFromTaskID");

                    b.HasIndex("StateID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("QA.Core.ProductCatalog.ActionsRunnerModel.TaskState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TaskStates");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "New"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Running"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Completed"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Error"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("QA.Core.ProductCatalog.ActionsRunnerModel.Task", b =>
                {
                    b.HasOne("QA.Core.ProductCatalog.ActionsRunnerModel.Schedule", "Schedule")
                        .WithMany("Tasks")
                        .HasForeignKey("ScheduleID");

                    b.HasOne("QA.Core.ProductCatalog.ActionsRunnerModel.Task", "SheduledFromTask")
                        .WithMany("SpawnedTasks")
                        .HasForeignKey("ScheduledFromTaskID");

                    b.HasOne("QA.Core.ProductCatalog.ActionsRunnerModel.TaskState", "TaskState")
                        .WithMany("Tasks")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
