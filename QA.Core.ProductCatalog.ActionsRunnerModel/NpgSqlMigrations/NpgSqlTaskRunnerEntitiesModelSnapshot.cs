// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QA.Core.ProductCatalog.ActionsRunnerModel;

namespace QA.Core.ProductCatalog.ActionsRunnerModel.NpgSqlMigrations
{
    [DbContext(typeof(NpgSqlTaskRunnerEntities))]
    partial class NpgSqlTaskRunnerEntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("QA.Core.ProductCatalog.ActionsRunnerModel.Schedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CronExpression")
                        .HasColumnName("cron_expression");

                    b.Property<bool>("Enabled")
                        .HasColumnName("enabled");

                    b.HasKey("ID")
                        .HasName("pk_schedules");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("QA.Core.ProductCatalog.ActionsRunnerModel.Task", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<byte[]>("BinData")
                        .HasColumnName("bin_data");

                    b.Property<string>("Config")
                        .HasColumnName("config");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("created_time");

                    b.Property<string>("Data")
                        .HasColumnName("data");

                    b.Property<string>("DisplayName")
                        .HasColumnName("display_name");

                    b.Property<string>("ExclusiveCategory")
                        .HasColumnName("exclusive_category");

                    b.Property<bool>("IsCancellationRequested")
                        .HasColumnName("is_cancellation_requested");

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("is_cancelled");

                    b.Property<DateTime?>("LastStatusChangeTime")
                        .HasColumnName("last_status_change_time");

                    b.Property<string>("Message")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<byte?>("Progress")
                        .HasColumnName("progress");

                    b.Property<int?>("ScheduleID")
                        .HasColumnName("schedule_id");

                    b.Property<int?>("ScheduledFromTaskID")
                        .HasColumnName("scheduled_from_task_id");

                    b.Property<int>("StateID")
                        .HasColumnName("state_id");

                    b.Property<int>("UserID")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name");

                    b.HasKey("ID")
                        .HasName("pk_tasks");

                    b.HasIndex("ScheduleID")
                        .HasName("ix_tasks_schedule_id");

                    b.HasIndex("ScheduledFromTaskID")
                        .HasName("ix_tasks_scheduled_from_task_id");

                    b.HasIndex("StateID")
                        .HasName("ix_tasks_state_id");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("QA.Core.ProductCatalog.ActionsRunnerModel.TaskState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("ID")
                        .HasName("pk_task_states");

                    b.ToTable("task_states");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "New"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Running"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Completed"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Error"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("QA.Core.ProductCatalog.ActionsRunnerModel.Task", b =>
                {
                    b.HasOne("QA.Core.ProductCatalog.ActionsRunnerModel.Schedule", "Schedule")
                        .WithMany("Tasks")
                        .HasForeignKey("ScheduleID")
                        .HasConstraintName("fk_tasks_schedules_schedule_id");

                    b.HasOne("QA.Core.ProductCatalog.ActionsRunnerModel.Task", "SheduledFromTask")
                        .WithMany("SpawnedTasks")
                        .HasForeignKey("ScheduledFromTaskID")
                        .HasConstraintName("fk_tasks_tasks_scheduled_from_task_id");

                    b.HasOne("QA.Core.ProductCatalog.ActionsRunnerModel.TaskState", "TaskState")
                        .WithMany("Tasks")
                        .HasForeignKey("StateID")
                        .HasConstraintName("fk_tasks_task_states_state_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
