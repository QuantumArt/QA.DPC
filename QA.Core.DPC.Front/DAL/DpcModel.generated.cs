#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Configuration;
using System.Reflection;

namespace QA.Core.DPC.Front.DAL
{
	[DatabaseAttribute(Name=@"dpc_web")]
	public partial class DpcModelDataContext : DataContext
	{
		private static MappingSource mappingSource = new AttributeMappingSource();
		
		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertProductRegion(ProductRegion instance);
		partial void UpdateProductRegion(ProductRegion instance);
		partial void DeleteProductRegion(ProductRegion instance);
		partial void InsertProduct(Product instance);
		partial void UpdateProduct(Product instance);
		partial void DeleteProduct(Product instance);
		#endregion
		
		#region Construction
	
		public DpcModelDataContext(string connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DpcModelDataContext(System.Data.IDbConnection connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DpcModelDataContext(string connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DpcModelDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		#endregion
		
		#region Tables
		public Table<ProductRegion> ProductRegions
		{
			get { return GetTable<ProductRegion>(); }
		}
		
		public Table<Product> Products
		{
			get { return GetTable<Product>(); }
		}
		
		#endregion
		
		#region Functions
		[Function(Name=@"dbo.RegionUpdated")]
		public int? RegionUpdated(
				[Parameter(Name=@"regionId", DbType=@"Int")] int? regionId) {
			IExecuteResult result = ExecuteMethodCall(this, (MethodInfo) MethodInfo.GetCurrentMethod(), regionId);
			return (int?) result.ReturnValue;
		}
		
		[Function(Name=@"dbo.DeleteProduct")]
		public int? DeleteProduct(
				[Parameter(Name=@"id", DbType=@"Int")] int? id) {
			IExecuteResult result = ExecuteMethodCall(this, (MethodInfo) MethodInfo.GetCurrentMethod(), id);
			return (int?) result.ReturnValue;
		}
		
		#endregion
		
	}
}

namespace QA.Core.DPC.Front.DAL
{	
	[Table(Name=@"dbo.ProductRegions")]
	public partial class ProductRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public ProductRegion()
		{
			_Product = default(EntityRef<Product>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnProductIdChanging(int value);
		partial void OnProductIdChanged();
		private int _ProductId;
		[Column(Storage=@"_ProductId", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int ProductId
		{
			get { return _ProductId; }
			set {
				if (_ProductId != value) {
					if (_Product.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnProductIdChanging(value);
					SendPropertyChanging();
					_ProductId = value;
					SendPropertyChanged("ProductId");
					OnProductIdChanged();
				}
			}
		}
		
		partial void OnRegionIdChanging(int value);
		partial void OnRegionIdChanged();
		private int _RegionId;
		[Column(Storage=@"_RegionId", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int RegionId
		{
			get { return _RegionId; }
			set {
				if (_RegionId != value) {
					OnRegionIdChanging(value);
					SendPropertyChanging();
					_RegionId = value;
					SendPropertyChanged("RegionId");
					OnRegionIdChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<Product> _Product;
		[Association(Name=@"Product_ProductRegion", Storage=@"_Product", ThisKey=@"ProductId", OtherKey=@"Id", IsForeignKey=true)]
		public Product Product
		{
			get {
				return _Product.Entity;
			}
			set {
				Product previousValue = _Product.Entity;
				if ((previousValue != value) || (!_Product.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Product.Entity = null;
						previousValue.ProductRegions.Remove(this);
					}
					_Product.Entity = value;
					if (value != null) {
						value.ProductRegions.Add(this);
						_ProductId = value.Id;
					}
					else {
						_ProductId = default(int);
					}
					SendPropertyChanged("Product");
				}
			}
		}

		#endregion
	}
}

namespace QA.Core.DPC.Front.DAL
{	
	[Table(Name=@"dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Product()
		{
			_ProductRegions = new EntitySet<ProductRegion>(attach_ProductRegions, detach_ProductRegions);
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIdChanging(int value);
		partial void OnIdChanged();
		private int _Id;
		[Column(Storage=@"_Id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get { return _Id; }
			set {
				if (_Id != value) {
					OnIdChanging(value);
					SendPropertyChanging();
					_Id = value;
					SendPropertyChanged("Id");
					OnIdChanged();
				}
			}
		}
		
		partial void OnDpcIdChanging(int value);
		partial void OnDpcIdChanged();
		private int _DpcId;
		[Column(Storage=@"_DpcId", DbType=@"Int", CanBeNull=false)]
		public int DpcId
		{
			get { return _DpcId; }
			set {
				if (_DpcId != value) {
					OnDpcIdChanging(value);
					SendPropertyChanging();
					_DpcId = value;
					SendPropertyChanged("DpcId");
					OnDpcIdChanged();
				}
			}
		}
		
		partial void OnSlugChanging(string value);
		partial void OnSlugChanged();
		private string _Slug;
		[Column(Storage=@"_Slug", DbType=@"NVarChar(50)")]
		public string Slug
		{
			get { return _Slug; }
			set {
				if (_Slug != value) {
					OnSlugChanging(value);
					SendPropertyChanging();
					_Slug = value;
					SendPropertyChanged("Slug");
					OnSlugChanged();
				}
			}
		}
		
		partial void OnVersionChanging(int value);
		partial void OnVersionChanged();
		private int _Version;
		[Column(Storage=@"_Version", DbType=@"Int", CanBeNull=false)]
		public int Version
		{
			get { return _Version; }
			set {
				if (_Version != value) {
					OnVersionChanging(value);
					SendPropertyChanging();
					_Version = value;
					SendPropertyChanged("Version");
					OnVersionChanged();
				}
			}
		}
		
		partial void OnIsLiveChanging(bool value);
		partial void OnIsLiveChanged();
		private bool _IsLive;
		[Column(Storage=@"_IsLive", DbType=@"Bit", CanBeNull=false)]
		public bool IsLive
		{
			get { return _IsLive; }
			set {
				if (_IsLive != value) {
					OnIsLiveChanging(value);
					SendPropertyChanging();
					_IsLive = value;
					SendPropertyChanged("IsLive");
					OnIsLiveChanged();
				}
			}
		}
		
		partial void OnLanguageChanging(string value);
		partial void OnLanguageChanged();
		private string _Language;
		[Column(Storage=@"_Language", DbType=@"NVarChar(10)")]
		public string Language
		{
			get { return _Language; }
			set {
				if (_Language != value) {
					OnLanguageChanging(value);
					SendPropertyChanging();
					_Language = value;
					SendPropertyChanged("Language");
					OnLanguageChanged();
				}
			}
		}
		
		partial void OnFormatChanging(string value);
		partial void OnFormatChanged();
		private string _Format;
		[Column(Storage=@"_Format", DbType=@"NVarChar(10)", CanBeNull=false)]
		public string Format
		{
			get { return _Format; }
			set {
				if (_Format != value) {
					OnFormatChanging(value);
					SendPropertyChanging();
					_Format = value;
					SendPropertyChanged("Format");
					OnFormatChanged();
				}
			}
		}
		
		partial void OnDataChanging(string value);
		partial void OnDataChanged();
		private string _Data;
		[Column(Storage=@"_Data", DbType=@"NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get { return _Data; }
			set {
				if (_Data != value) {
					OnDataChanging(value);
					SendPropertyChanging();
					_Data = value;
					SendPropertyChanged("Data");
					OnDataChanged();
				}
			}
		}
		
		partial void OnAliasChanging(string value);
		partial void OnAliasChanged();
		private string _Alias;
		[Column(Storage=@"_Alias", DbType=@"NVarChar(250)")]
		public string Alias
		{
			get { return _Alias; }
			set {
				if (_Alias != value) {
					OnAliasChanging(value);
					SendPropertyChanging();
					_Alias = value;
					SendPropertyChanged("Alias");
					OnAliasChanged();
				}
			}
		}
		
		partial void OnCreatedChanging(DateTime value);
		partial void OnCreatedChanged();
		private DateTime _Created;
		[Column(Storage=@"_Created", DbType=@"DateTime NOT NULL", CanBeNull=false)]
		public DateTime Created
		{
			get { return _Created; }
			set {
				if (_Created != value) {
					OnCreatedChanging(value);
					SendPropertyChanging();
					_Created = value;
					SendPropertyChanged("Created");
					OnCreatedChanged();
				}
			}
		}
		
		partial void OnUpdatedChanging(DateTime value);
		partial void OnUpdatedChanged();
		private DateTime _Updated;
		[Column(Storage=@"_Updated", DbType=@"DateTime NOT NULL", CanBeNull=false)]
		public DateTime Updated
		{
			get { return _Updated; }
			set {
				if (_Updated != value) {
					OnUpdatedChanging(value);
					SendPropertyChanging();
					_Updated = value;
					SendPropertyChanged("Updated");
					OnUpdatedChanged();
				}
			}
		}
		
		partial void OnHashChanging(string value);
		partial void OnHashChanged();
		private string _Hash;
		[Column(Storage=@"_Hash", DbType=@"NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Hash
		{
			get { return _Hash; }
			set {
				if (_Hash != value) {
					OnHashChanging(value);
					SendPropertyChanging();
					_Hash = value;
					SendPropertyChanged("Hash");
					OnHashChanged();
				}
			}
		}
		
		partial void OnMarketingProductIdChanging(int? value);
		partial void OnMarketingProductIdChanged();
		private int? _MarketingProductId;
		[Column(Storage=@"_MarketingProductId", DbType=@"Int")]
		public int? MarketingProductId
		{
			get { return _MarketingProductId; }
			set {
				if (_MarketingProductId != value) {
					OnMarketingProductIdChanging(value);
					SendPropertyChanging();
					_MarketingProductId = value;
					SendPropertyChanged("MarketingProductId");
					OnMarketingProductIdChanged();
				}
			}
		}
		
		partial void OnTitleChanging(string value);
		partial void OnTitleChanged();
		private string _Title;
		[Column(Storage=@"_Title", DbType=@"NVarChar(500)")]
		public string Title
		{
			get { return _Title; }
			set {
				if (_Title != value) {
					OnTitleChanging(value);
					SendPropertyChanging();
					_Title = value;
					SendPropertyChanged("Title");
					OnTitleChanged();
				}
			}
		}
		
		partial void OnUserUpdatedChanging(string value);
		partial void OnUserUpdatedChanged();
		private string _UserUpdated;
		[Column(Storage=@"_UserUpdated", DbType=@"NVarChar(50)")]
		public string UserUpdated
		{
			get { return _UserUpdated; }
			set {
				if (_UserUpdated != value) {
					OnUserUpdatedChanging(value);
					SendPropertyChanging();
					_UserUpdated = value;
					SendPropertyChanged("UserUpdated");
					OnUserUpdatedChanged();
				}
			}
		}
		
		partial void OnUserUpdatedIdChanging(int? value);
		partial void OnUserUpdatedIdChanged();
		private int? _UserUpdatedId;
		[Column(Storage=@"_UserUpdatedId", DbType=@"Int")]
		public int? UserUpdatedId
		{
			get { return _UserUpdatedId; }
			set {
				if (_UserUpdatedId != value) {
					OnUserUpdatedIdChanging(value);
					SendPropertyChanging();
					_UserUpdatedId = value;
					SendPropertyChanged("UserUpdatedId");
					OnUserUpdatedIdChanged();
				}
			}
		}
		
		partial void OnProductTypeChanging(string value);
		partial void OnProductTypeChanged();
		private string _ProductType;
		[Column(Storage=@"_ProductType", DbType=@"NVarChar(250)")]
		public string ProductType
		{
			get { return _ProductType; }
			set {
				if (_ProductType != value) {
					OnProductTypeChanging(value);
					SendPropertyChanging();
					_ProductType = value;
					SendPropertyChanged("ProductType");
					OnProductTypeChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntitySet<ProductRegion> _ProductRegions;
		[Association(Name=@"Product_ProductRegion", Storage=@"_ProductRegions", ThisKey=@"Id", OtherKey=@"ProductId")]
		public EntitySet<ProductRegion> ProductRegions
		{
			get {
				return _ProductRegions;
			}
			set {
				_ProductRegions.Assign(value);
			}
		}

		private void attach_ProductRegions(ProductRegion entity)
		{
			SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductRegions(ProductRegion entity)
		{
			SendPropertyChanging();
			entity.Product = null;
		}
		#endregion
	}
}
#pragma warning restore 1591