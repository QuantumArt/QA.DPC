// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QA.Core.DPC.Front.DAL;

namespace QA.Core.DPC.Front.Migrations.NpgSqlMigrations
{
    [DbContext(typeof(NpgSqlDpcModelDataContext))]
    [Migration("20190409084809_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("QA.Core.DPC.Front.DAL.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("Data")
                        .HasColumnName("data");

                    b.Property<int>("DpcId")
                        .HasColumnName("dpc_id");

                    b.Property<string>("Format")
                        .HasColumnName("format");

                    b.Property<string>("Hash")
                        .HasColumnName("hash");

                    b.Property<bool>("IsLive")
                        .HasColumnName("is_live");

                    b.Property<string>("Language")
                        .HasColumnName("language");

                    b.Property<int?>("MarketingProductId")
                        .HasColumnName("marketing_product_id");

                    b.Property<string>("ProductType")
                        .HasColumnName("product_type");

                    b.Property<string>("Slug")
                        .HasColumnName("slug");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .HasColumnName("updated");

                    b.Property<string>("UserUpdated")
                        .HasColumnName("user_updated");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnName("user_updated_id");

                    b.Property<int>("Version")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products");
                });

            modelBuilder.Entity("QA.Core.DPC.Front.DAL.ProductRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<int>("RegionId")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_product_regions");

                    b.HasIndex("ProductId")
                        .HasName("ix_product_regions_product_id");

                    b.ToTable("product_regions");
                });

            modelBuilder.Entity("QA.Core.DPC.Front.DAL.ProductRegionVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ProductVersionId")
                        .HasColumnName("product_version_id");

                    b.Property<int>("RegionId")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_product_region_versions");

                    b.HasIndex("ProductVersionId")
                        .HasName("ix_product_region_versions_product_version_id");

                    b.ToTable("product_region_versions");
                });

            modelBuilder.Entity("QA.Core.DPC.Front.DAL.RegionUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("RegionId")
                        .HasColumnName("region_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_region_updates");

                    b.ToTable("region_updates");
                });

            modelBuilder.Entity("QA.Core.DPC.Front.ProductVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("Data")
                        .HasColumnName("data");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("DpcId")
                        .HasColumnName("dpc_id");

                    b.Property<string>("Format")
                        .HasColumnName("format");

                    b.Property<string>("Hash")
                        .HasColumnName("hash");

                    b.Property<bool>("IsLive")
                        .HasColumnName("is_live");

                    b.Property<string>("Language")
                        .HasColumnName("language");

                    b.Property<int?>("MarketingProductId")
                        .HasColumnName("marketing_product_id");

                    b.Property<DateTime>("Modification")
                        .HasColumnName("modification");

                    b.Property<string>("ProductType")
                        .HasColumnName("product_type");

                    b.Property<string>("Slug")
                        .HasColumnName("slug");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated")
                        .HasColumnName("updated");

                    b.Property<string>("UserUpdated")
                        .HasColumnName("user_updated");

                    b.Property<int?>("UserUpdatedId")
                        .HasColumnName("user_updated_id");

                    b.Property<int>("Version")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_product_versions");

                    b.ToTable("product_versions");
                });

            modelBuilder.Entity("QA.Core.DPC.Front.DAL.ProductRegion", b =>
                {
                    b.HasOne("QA.Core.DPC.Front.DAL.Product", "Product")
                        .WithMany("ProductRegions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_regions_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QA.Core.DPC.Front.DAL.ProductRegionVersion", b =>
                {
                    b.HasOne("QA.Core.DPC.Front.ProductVersion", "ProductVersion")
                        .WithMany("ProductRegionVersions")
                        .HasForeignKey("ProductVersionId")
                        .HasConstraintName("fk_product_region_versions_product_versions_product_version_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
